// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rendr.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rendr.proto

It has these top-level messages:
	JobCreateRequest
	JobCreateResponse
	JobListRequest
	JobListResponse
	JobDefinition
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_QUEUED     Status = 0
	Status_INPROGRESS Status = 1
	Status_FINISHED   Status = 2
	Status_ABORTED    Status = 3
)

var Status_name = map[int32]string{
	0: "QUEUED",
	1: "INPROGRESS",
	2: "FINISHED",
	3: "ABORTED",
}
var Status_value = map[string]int32{
	"QUEUED":     0,
	"INPROGRESS": 1,
	"FINISHED":   2,
	"ABORTED":    3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type JobCreateRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *JobCreateRequest) Reset()                    { *m = JobCreateRequest{} }
func (m *JobCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*JobCreateRequest) ProtoMessage()               {}
func (*JobCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *JobCreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type JobCreateResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *JobCreateResponse) Reset()                    { *m = JobCreateResponse{} }
func (m *JobCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*JobCreateResponse) ProtoMessage()               {}
func (*JobCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JobCreateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type JobListRequest struct {
	States []Status `protobuf:"varint,1,rep,packed,name=states,enum=rpc.Status" json:"states,omitempty"`
}

func (m *JobListRequest) Reset()                    { *m = JobListRequest{} }
func (m *JobListRequest) String() string            { return proto.CompactTextString(m) }
func (*JobListRequest) ProtoMessage()               {}
func (*JobListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JobListRequest) GetStates() []Status {
	if m != nil {
		return m.States
	}
	return nil
}

type JobListResponse struct {
	Jobs []*JobDefinition `protobuf:"bytes,1,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *JobListResponse) Reset()                    { *m = JobListResponse{} }
func (m *JobListResponse) String() string            { return proto.CompactTextString(m) }
func (*JobListResponse) ProtoMessage()               {}
func (*JobListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *JobListResponse) GetJobs() []*JobDefinition {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type JobDefinition struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Status string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *JobDefinition) Reset()                    { *m = JobDefinition{} }
func (m *JobDefinition) String() string            { return proto.CompactTextString(m) }
func (*JobDefinition) ProtoMessage()               {}
func (*JobDefinition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *JobDefinition) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JobDefinition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobDefinition) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*JobCreateRequest)(nil), "rpc.JobCreateRequest")
	proto.RegisterType((*JobCreateResponse)(nil), "rpc.JobCreateResponse")
	proto.RegisterType((*JobListRequest)(nil), "rpc.JobListRequest")
	proto.RegisterType((*JobListResponse)(nil), "rpc.JobListResponse")
	proto.RegisterType((*JobDefinition)(nil), "rpc.JobDefinition")
	proto.RegisterEnum("rpc.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Job service

type JobClient interface {
	Create(ctx context.Context, in *JobCreateRequest, opts ...grpc.CallOption) (*JobCreateResponse, error)
	List(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobListResponse, error)
}

type jobClient struct {
	cc *grpc.ClientConn
}

func NewJobClient(cc *grpc.ClientConn) JobClient {
	return &jobClient{cc}
}

func (c *jobClient) Create(ctx context.Context, in *JobCreateRequest, opts ...grpc.CallOption) (*JobCreateResponse, error) {
	out := new(JobCreateResponse)
	err := grpc.Invoke(ctx, "/rpc.Job/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) List(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobListResponse, error) {
	out := new(JobListResponse)
	err := grpc.Invoke(ctx, "/rpc.Job/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Job service

type JobServer interface {
	Create(context.Context, *JobCreateRequest) (*JobCreateResponse, error)
	List(context.Context, *JobListRequest) (*JobListResponse, error)
}

func RegisterJobServer(s *grpc.Server, srv JobServer) {
	s.RegisterService(&_Job_serviceDesc, srv)
}

func _Job_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Job/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).Create(ctx, req.(*JobCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Job/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).List(ctx, req.(*JobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Job_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Job",
	HandlerType: (*JobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Job_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Job_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rendr.proto",
}

func init() { proto.RegisterFile("rendr.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x51, 0x4f, 0x4f, 0xfa, 0x40,
	0x14, 0xa4, 0x2d, 0xe9, 0xef, 0xe7, 0xab, 0xd6, 0xfa, 0x54, 0x42, 0x38, 0x91, 0x25, 0x21, 0xc4,
	0x03, 0x07, 0x88, 0x07, 0x4e, 0x46, 0x6d, 0x55, 0xaa, 0x01, 0xdd, 0xca, 0x07, 0xe8, 0xc2, 0x9a,
	0xac, 0x89, 0xdd, 0xba, 0xbb, 0xfd, 0xfe, 0xc6, 0xfe, 0x41, 0xe0, 0xb6, 0x3b, 0x6f, 0xe6, 0x65,
	0x66, 0x1e, 0x78, 0x8a, 0x67, 0x1b, 0x35, 0xce, 0x95, 0x34, 0x12, 0x1d, 0x95, 0xaf, 0xc9, 0x10,
	0x82, 0x58, 0xb2, 0x7b, 0xc5, 0x53, 0xc3, 0x29, 0xff, 0x2e, 0xb8, 0x36, 0x88, 0xd0, 0xce, 0xd2,
	0x2f, 0xde, 0xb5, 0xfa, 0xd6, 0xe8, 0x88, 0x96, 0x6f, 0x32, 0x80, 0xb3, 0x1d, 0x9e, 0xce, 0x65,
	0xa6, 0x39, 0xfa, 0x60, 0x8b, 0x4d, 0x4d, 0xb3, 0xc5, 0x86, 0x5c, 0x83, 0x1f, 0x4b, 0xf6, 0x22,
	0xb4, 0x69, 0x56, 0x0d, 0xc0, 0xd5, 0x26, 0x35, 0x5c, 0x77, 0xad, 0xbe, 0x33, 0xf2, 0x27, 0xde,
	0x58, 0xe5, 0xeb, 0x71, 0x62, 0x52, 0x53, 0x68, 0x5a, 0x8f, 0xc8, 0x0c, 0x4e, 0xb7, 0xb2, 0x7a,
	0xf3, 0x10, 0xda, 0x9f, 0x92, 0x55, 0x2a, 0x6f, 0x82, 0xa5, 0x2a, 0x96, 0x2c, 0xe4, 0x1f, 0x22,
	0x13, 0x46, 0xc8, 0x8c, 0x96, 0x73, 0xf2, 0x0c, 0x27, 0x7b, 0xf0, 0xa1, 0xa5, 0x6d, 0x16, 0xfb,
	0x2f, 0x0b, 0x76, 0x2a, 0x53, 0x85, 0xee, 0x3a, 0x25, 0x5a, 0xff, 0xae, 0x6e, 0xc0, 0xad, 0x9c,
	0x21, 0x80, 0xfb, 0xb6, 0x8a, 0x56, 0x51, 0x18, 0xb4, 0xd0, 0x07, 0x98, 0x2f, 0x5e, 0xe9, 0xf2,
	0x91, 0x46, 0x49, 0x12, 0x58, 0x78, 0x0c, 0xff, 0x1f, 0xe6, 0x8b, 0x79, 0xf2, 0x14, 0x85, 0x81,
	0x8d, 0x1e, 0xfc, 0xbb, 0xbd, 0x5b, 0xd2, 0xf7, 0x28, 0x0c, 0x9c, 0x49, 0x01, 0x4e, 0x2c, 0x19,
	0xce, 0xc0, 0xad, 0x8a, 0xc2, 0xcb, 0xc6, 0xf8, 0x5e, 0xc1, 0xbd, 0xce, 0x21, 0x5c, 0xa5, 0x26,
	0x2d, 0x9c, 0x42, 0xfb, 0xb7, 0x07, 0x3c, 0x6f, 0x18, 0x3b, 0x65, 0xf6, 0x2e, 0xf6, 0xc1, 0x46,
	0xc4, 0xdc, 0xf2, 0x9e, 0xd3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0xb5, 0xe8, 0xd5, 0xde,
	0x01, 0x00, 0x00,
}
